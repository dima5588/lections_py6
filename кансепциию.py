# Основные Концепции:
# 1) Абстракция: Создать абстрактный класс Транспортное Средство, который будет базовым для всех типов транспорта.
# 2) Наследование: Разработать классы Грузовик, Легковой Автомобиль и Мотоцикл, наследующие от Транспортное Средство.
# 3) Полиморфизм: Реализовать методы, такие как двигаться, загружать и разгружать, которые будут работать по-разному для разных типов транспортных средств.
# 4) Миксины: Включить миксин, например GPSМиксин, который добавляет функциональность GPS в транспортные средства.
# Задачи:
# Абстрактный Класс Транспортное Средство:

# Определите атрибуты, общие для всех транспортных средств (например, марка, модель, год выпуска).
# Определите абстрактные методы двигаться, загружать и разгружать.
# Классы Грузовик, Легковой Автомобиль и Мотоцикл:

# Наследуйте эти классы от Транспортное Средство.
# Реализуйте методы двигаться, загружать и разгружать по-своему для каждого типа транспорта.
# Миксин GPSМиксин:

# Добавьте методы для отслеживания местоположения транспорта.
# Интегрируйте этот миксин с классами транспортных средств.
# Тестирование:

# Создайте несколько экземпляров каждого типа транспортного средства.
# Продемонстрируйте полиморфизм, вызывая общие методы на разных объектах.
# Покажите работу GPS-функциональности.
# Это задание позволит студентам практиковаться в применении концепций ООП в Python, а также познакомит их с реальной ситуацией, где эти практики могут быть полезны.

from abc import ABC, abstractmethod

class ТранспортноеСредство(ABC):
    def __init__(self, марка, модель, год_выпуска):
        self.марка = марка
        self.модель = модель
        self.год_выпуска = год_выпуска

    @abstractmethod
    def двигаться(self):
        pass

    @abstractmethod
    def загружать(self):
        pass

    @abstractmethod
    def разгружать(self):
        pass

class Грузовик(ТранспортноеСредство):
    def двигаться(self):
        return f"{self.марка} {self.модель} грузовик едет по дороге"

    def загружать(self):
        return f"{self.марка} {self.модель} грузовик загружается"

    def разгружать(self):
        return f"{self.марка} {self.модель} грузовик разгружается"

class ЛегковойАвтомобиль(ТранспортноеСредство):
    def двигаться(self):
        return f"{self.марка} {self.модель} легковой автомобиль едет по дороге"

    def загружать(self):
        return f"{self.марка} {self.модель} легковой автомобиль загружается"

    def разгружать(self):
        return f"{self.марка} {self.модель} легковой автомобиль разгружается"

class Мотоцикл(ТранспортноеСредство):
    def двигаться(self):
        return f"{self.марка} {self.модель} мотоцикл едет по дороге"

    def загружать(self):
        return f"{self.марка} {self.модель} мотоцикл загружается"

    def разгружать(self):
        return f"{self.марка} {self.модель} мотоцикл разгружается"

class GPSМиксин:
    def отслеживать_местоположение(self):
        return f"Отслеживание местоположения {self.марка} {self.модель}"

грузовик = Грузовик("Volvo", "FH16", 2022)
легковой_автомобиль = ЛегковойАвтомобиль("Toyota", "Camry", 2023)
мотоцикл = Мотоцикл("Honda", "CBR600RR", 2021)

print(грузовик.двигаться())
print(грузовик.загружать())
print(грузовик.разгружать())

print(легковой_автомобиль.двигаться())
print(легковой_автомобиль.загружать())
print(легковой_автомобиль.разгружать())

print(мотоцикл.двигаться())
print(мотоцикл.загружать())
print(мотоцикл.разгружать())

class ТранспортноеСредствоСGPS(ТранспортноеСредство, GPSМиксин):
    pass

грузовик_с_gps = ТранспортноеСредствоСGPS("Volvo", "FH16", 2022)
print(грузовик_с_gps.отслеживать_местоположение())
